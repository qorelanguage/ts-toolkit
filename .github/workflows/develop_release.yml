name: Beta release

on:
  push:
    branches:
      - develop

jobs:
  Publish-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Get current time
        uses: josStorer/get-current-time@v2.0.2
        id: current_time
        with:
          format: YYYYMMDD-HH
          utcOffset: "+01:00"
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      # SETUP GIT USER
      - name: Setup git user
        run: |
          # setup the username and email. I tend to use 'GitHub Actions Bot' with no email by default
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          
      # SETUP NODE
      - uses: actions/setup-node@v3
        with:
          node-version: latest
          
      # INSTALL MODULES
      - name: Installing modules
        id: install_modules
        run: |
          rm -rf node_modules
          yarn install
          
      # SAVE RELEASE VERSION
      - name: Save release version to outputs
        id: save_release_version
        run: echo ::set-output name=version::$(node -pe "require('./package.json').version")
        
      # TEST THE BUILD
      - name: Build test
        id: build_test
        run: yarn build:test
        
      # RUN UNIT TESTS
      - name: Running tests
        id: tests
        run: yarn test
        
      # PUBLISH TO NPM
      - name: Publish to NPM
        id: npm_publish
        uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN }}
          tag: beta
          access: public
          
      # PUBLISH TO CHROMATIC
      - name: Publish to Chromatic
        env:
          ENDPOINT_API: ${{ secrets.ENDPOINT_API}}
          API_USER_NAME: ${{ secrets.API_USER_NAME}}
          API_USER_PASS: ${{ secrets.API_USER_PASS }}
        id: chromatic_publish
        uses: chromaui/action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          exitZeroOnChanges: true
          
      # CREATE GITHUB RELEASE
      - name: Create a release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.save_release_version.outputs.version }}
          release_name: v${{ steps.save_release_version.outputs.version }}
          body: v${{ steps.save_release_version.outputs.version }}
          draft: false
          prerelease: false
          
      # NOTIFY SLACK IF SUCCESS
      - name: Slack notification
        uses: Foxhoundn/slack@v1.2.94
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        if: success()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: Qorus Toolkit Publish & Release
          SLACK_MESSAGE: ':white_check_mark: Release *v${{ steps.save_release_version.outputs.version }}* successfuly created & published!'
          
      # NOTIFY SLACK IF FAILURE
      - name: Slack notification
        uses: Foxhoundn/slack@v1.2.94
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: Qorus Toolkit Publish & Release
          SLACK_MESSAGE: ':exclamation: There was an error creating release *v${{ steps.save_release_version.outputs.version }}*. Please check the steps below.'
          
      # Notify Discord
      - name: Get repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Print head git commit message
        id: get_head_commit_message
        run: echo "::set-output name=HEAD_COMMIT_MESSAGE::$(git show -s --format=%s)"
      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{secrets.DISCORD_WEBHOOK}}
          DISCORD_EMBEDS: '[{ "author": {  "icon_url": "https://avatars.githubusercontent.com/${{ github.actor }}", "name": "${{ github.actor }}", "url": "https://github.com/${{github.actor}}" },"url": "https://github.com/${{github.repository}}/commit/${{github.sha}}","fields": [{ "name": "Commit Message", "value": "${{ steps.get_head_commit_message.outputs.HEAD_COMMIT_MESSAGE }}"},{ "name": "Repository", "value": "[${{github.event.repository.name}}](${{github.event.repository.clone_url}})", "inline": true },{ "name": "Branch", "value": "[${{github.ref_name}}](https://github.com/${{github.repository}}/pull/${{github.ref_name}})", "inline": true },{ "name": "Event", "value": "${{github.event_name}}", "inline": true },{ "name": "Author", "value": "[${{github.actor}}](https://github.com/${{github.actor}})", "inline": true },{ "name": "Job", "value": "${{github.job}}", "inline": true},{ "name": "", "value": "[Github Action](https://github.com/${{ github.repository}}/actions/runs/${{ github.run_id}})"},{ "name": "", "value": "[Documentation](${{ steps.chromatic_publish.outputs.storybookUrl }})" },{ "name": "", "value": "[Chromatic Tests](${{ steps.chromatic_publish.outputs.buildUrl }})" }],"color":65280,"footer":{"text": "Published at ${{steps.current_time.outputs.readableTime}}"}}]'
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: ':white_check_mark: Release *v${{ steps.save_release_version.outputs.version }}* successfully created & published!'
        if: success()
      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{secrets.DISCORD_WEBHOOK}}
          DISCORD_EMBEDS: '[{ "author": {  "icon_url": "https://avatars.githubusercontent.com/${{ github.actor }}", "name": "${{ github.actor }}", "url": "https://github.com/${{github.actor}}" },"url": "https://github.com/${{github.repository}}/commit/${{github.sha}}","fields": [{ "name": "Commit Message", "value": "${{ steps.get_head_commit_message.outputs.HEAD_COMMIT_MESSAGE }}"},{ "name": "Repository", "value": "[${{github.event.repository.name}}](${{github.event.repository.clone_url}})", "inline": true },{ "name": "Branch", "value": "[${{github.ref_name}}](https://github.com/${{github.repository}}/pull/${{github.ref_name}})", "inline": true },{ "name": "Event", "value": "${{github.event_name}}", "inline": true },{ "name": "Author", "value": "[${{github.actor}}](https://github.com/${{github.actor}})", "inline": true },{ "name": "Job", "value": "${{github.job}}", "inline": true },{ "name": "", "value": "[Github Action](https://github.com/${{ github.repository}}/actions/runs/${{ github.run_id}})"}],"color":16711680,"footer":{"text": "Published at ${{steps.current_time.outputs.readableTime}}"}}]'
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: ':exclamation: Release *v${{ steps.save_release_version.outputs.version }}* failed!'
        if: failure()