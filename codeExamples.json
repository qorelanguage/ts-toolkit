[
  {
    "QorusAuthenticator.addEndpoint": "// Initializes a new endpoint and returns it\n// Optional user and pass parameters can be provided to initialize the endpoint and then authenticate the user\nQorus.QorusAuthenticator.addEndpoint({\n  endpointId: 'rippy',\n  url: 'https://sandbox.qoretechnologies.com',\n  version: 'latest',\n});\n// => {\"url\":\"https://sandbox.qoretechnologies.com\",\"id\":\"rippy\",\"version\":\"latest\"}\n"
  },
  {
    "QorusAuthenticator.getAllEndpoints": "await Qorus.QorusAuthenticator.initEndpoint({\n  endpointId: 'rippy',\n  url: 'https://sandbox.qoretechnologies.com',\n  version: 'latest',\n});\n\nQorus.QorusAuthenticator.getAllEndpoints();\n// => [{ \"url\":\"https://sandbox.qoretechnologies.com\",\"id\":\"rippy\",\"version\": \"latest\" }]\n"
  },
  {
    "QorusAuthenticator.getApiPaths": "Qorus.QorusAuthenticator.addEndpoint({\n  endpointId: 'rippy',\n  url: 'https://sandbox.qoretechnologies.com',\n  version: 'latest',\n});\n\nQorus.QorusAuthenticator.getApiPaths();\n// => {\"login\":\"/api/latest/public/login\",\"logout\":\"/api/latest/logout\",\"validateToken\":\"/api/latest/system?action=validateWsToken\",\"validateNoAuth\":\"/api/latest/public/info\"}\n"
  },
  {
    "QorusAuthenticator.getAuthToken": "Qorus.QorusAuthenticator.addEndpoint({\n  endpointId: 'rippy',\n  url: 'https://sandbox.qoretechnologies.com',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({ user: 'sandbox', pass: 'sandbox' });\n\nQorus.QorusAuthenticator.getAuthToken();\n// => \"random token hash returned from the server\"\n"
  },
  {
    "QorusAuthenticator.getEndpointById": "Qorus.QorusAuthenticator.addEndpoint({\n  endpointId: 'rippy',\n  url: 'https://sandbox.qoretechnologies.com',\n  version: 'latest',\n});\n\n// Returns the endpoint if exists in the endpoints array\nawait QorusAuthenticator.getEndpointById('rippy');\n// => {\"url\":\"https://sandbox.qoretechnologies.com\",\"id\":\"rippy\",\"version\":\"latest\"}\n"
  },
  {
    "QorusAuthenticator.getEndpointVersion": "Qorus.QorusAuthenticator.addEndpoint({\n  endpointId: 'rippy',\n  url: 'https://sandbox.qoretechnologies.com',\n  version: 'latest',\n});\n\nQorus.QorusAuthenticator.getEndpointVersion();\n// => 'latest'\n"
  },
  {
    "QorusAuthenticator.getSelectedEndpoint": "Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\n// Returns selected endpoint\nawait Qorus.QorusAuthenticator.getSelectedEndpoint();\n// => {\"url\":\"https://sandbox.qoretechnologies.com\",\"id\":\"rippy\",\"version\":\"latest\"}\n"
  },
  {
    "QorusAuthenticator.login": "Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// => \"random token hash returned from the server\"\n"
  },
  {
    "QorusAuthenticator.logout": "//Initialize the endpoint before authentication\nQorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\n\n// Log in first\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Logs out the user\nawait Qorus.QorusAuthenticator.logout();\n// => void\n"
  },
  {
    "QorusAuthenticator.renewSelectedEndpointToken": "Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Renews auth-token for the selected endpoint\nawait Qorus.QorusAuthenticator.renewSelectedEndpointToken({ user: 'sandbox', pass: 'sandbox' });\n// => \"random token hash returned from the server\"\n"
  },
  {
    "QorusAuthenticator.selectEndpoint": "Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Changes selected endpoint and return true if selected\nawait Qorus.QorusAuthenticator.selectEndpoint('rippy');\n// => {\"url\":\"https://sandbox.qoretechnologies.com\",\"id\":\"rippy\",\"version\":\"latest\"}\n"
  },
  {
    "QorusAuthenticator.setEndpointUrl": "Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\nawait Qorus.QorusAuthenticator.setEndpointUrl('https://www.google.com', 'rippy');\n// => 'https://www.google.com'\n"
  },
  {
    "QorusAuthenticator.setEndpointVersion": "Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\nawait Qorus.QorusAuthenticator.setEndpointVersion(6, 'rippy');\n// => 6\n"
  },
  {
    "QorusDataProvider.get": "Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data providers with context api\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getApi();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\nconst factory = await dataProviderBrowse.get(browseChildrenNames.factory);\n// => ProviderWithOptions { path: ..., responseData: {...}, providerData: {...}, responseError: {...}, context: ...}\n"
  },
  {
    "QorusDataProvider.getApi": "Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data providers with context api\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getApi();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\nconst factory = await dataProviderBrowse.getApi(browseChildrenNames.factory);\n// => ProviderWithOptions { path: ..., responseData: {...}, providerData: {...}, responseError: {...}, context: ...}\n"
  },
  {
    "QorusDataProvider.getChildrenNames": "Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data providers with context api\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getApi();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\n// {factory: 'factory', connection: 'connection', datasource: 'datasource' }\n"
  },
  {
    "QorusDataProvider.getEvent": "Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data providers with context event\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getEvent();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\nconst factory = await dataProviderBrowse.get(browseChildrenNames.factory);\n// => ProviderWithOptions { path: ..., responseData: {...}, providerData: {...}, responseError: {...}, context: ...}\n"
  },
  {
    "QorusDataProvider.getMessage": "Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Browse data providers with context message\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getMessage();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\nconst factory = await dataProviderBrowse.getMessage(browseChildrenNames.factory);\n// => ProviderWithOptions { path: ..., responseData: {...}, providerData: {...}, responseError: {...}, context: ...}\n"
  },
  {
    "QorusDataProvider.getRecord": "Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Browse data providers with context record\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getRecord();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\n"
  },
  {
    "QorusDataProvider.has": "Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Browse data providers with context api\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getApi();\n// Select factory provider\nconst browseChildrenNames = dataProviderBrowse.getChildrenNames();\nconst factory = await dataProviderBrowse.get(browseChildrenNames.factory);\n// => ProviderWithOptions { path: ..., responseData: {...}, providerData: {...}, responseError: {...}, context: ...}\n\nfactory.has('db');\n// => true\n"
  },
  {
    "QorusOptions.get": "Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data provider with context record\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getRecord();\n\n// Select factory provider\nconst factoryProvider = await dataProviderBrowse.get('factory');\n\n// Select db provider\nconst options = factoryProvider.getOptions('db');\n\n// Get object of provided constructor option\noptions.get('datasource');\n// => {name: \"datasource\", required: true, types: [\"string\", \"object<AbstractDatasource>\"], jsTypes: [\"string\", \"oject\"], value: null}\n"
  },
  {
    "QorusOptions.getAll": "Qorus.QorusAuthenticator.addEndpoint({\n  endpointId: 'rippy',\n  url: 'https://sandbox.qoretechnologies.com',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data provider with context record\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getRecord();\n\n// Select factory provider\nconst factoryProvider = await dataProviderBrowse.get('factory');\n\n// Select db provider\nconst options = factoryProvider.getOptions('db');\n\n// Set required constructor option\noptions.set('datasource', 'pgsql:omquser/omquser@omquser%bee');\n\n// Returns all the the constructor properties with their values, throws error if any required property have not been provided and return undefined.\noptions.getAll();\n// => {datasource: \"pgsql:omquser/omquser@omquser%bee\"}\n"
  },
  {
    "QorusOptions.getJsType": "Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data provider with context record\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getRecord();\n\n// Select factory provider\nconst factoryProvider = await dataProviderBrowse.get('factory');\n\n// Select db provider\nconst options = factoryProvider.getOptions('db');\n\n// Get js types for the provided constructor option\noptions.getJsType('datasource');\n// => [\"string\", \"object\"]\n"
  },
  {
    "QorusOptions.getType": "Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Browse data provider with context record\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getRecord();\n\n// Select factory provider\nconst factoryProvider = await dataProviderBrowse.get('factory');\n\n// Select db provider\nconst options = factoryProvider.getOptions('db');\n\n// Get qore type for the provided constructor option\noptions.getType('datasource');\n// => [\"string\", \"object<AbstractDatasource>\"]\n"
  },
  {
    "QorusOptions.set": "Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Browse data provider with context record\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getRecord();\n\n// Select factory provider\nconst factoryProvider = await dataProviderBrowse.get('factory');\n\n// Select db provider\nconst options = factoryProvider.getOptions('db');\n\n// Set required constructor option\noptions.set('datasource', 'pgsql:omquser/omquser@omquser%bee');\n// => {name: \"datasource\", required: true, types: [\"string\", \"object<AbstractDatasource>\"], jsTypes: [\"string\", \"oject\"], value: {type: \"string\", value: \"pgsql:omquser/omquser@omquser%bee\"}}\n"
  },
  {
    "QorusOptions.validate": "Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n// Browse data provider with context record\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getRecord();\n\n// Select factory provider\nconst factoryProvider = await dataProviderBrowse.get('factory');\n\n// Select db provider\nconst options = factoryProvider.getOptions('db');\n\n// Set required constructor option\noptions.set('datasource', 'pgsql:omquser/omquser@omquser%bee');\n\n// Validate if all the required constructor properties are provided\noptions.validate();\n// => true\n\n// Fetch db provider\nconst dbProvider = await factoryProvider.get('db', options);\n// => { erp_order_import: 'erp_order_import', external_gl_journal: 'external_gl_journal', gl_record: 'gl_record', order_items: 'order_items', orders: 'orders', table_1: 'table_1', table_2: 'table_2', 'type:record': 'type:record' }\n"
  },
  {
    "QorusOptions.validateProperty": "Qorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Browse data provider with context record\nconst dataProviderBrowse = await Qorus.QorusDataProvider.getRecord();\n\n// Select factory provider\nconst factoryProvider = await dataProviderBrowse.get('factory');\n\n// Select db provider\nconst options = factoryProvider.getOptions('db');\n\n// Get object of provided constructor option\noptions.validateProperty('datasource', 'pgsql:omquser/omquser@omquser%bee');\n// => true\n"
  },
  {
    "QorusRequest.deleteReq": "// First we initialize an Endpoint and provider user and pass to authenticate the user along with it\nQorus.QorusAuthenticator.addEndpoint({\n  endpointId: 'rippy',\n  url: 'https://sandbox.qoretechnologies.com',\n  version: 'latest',\n});\n\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Next we initialize a delete request against our defined Qorus server\nconst result = await Qorus.QorusRequest.deleteReq({\n  path: '/api/latest/classes/1',\n});\n"
  },
  {
    "QorusRequest.get": "// First we initialize an Endpoint and provider user and pass to authenticate the user along with it\nQorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Next we initialize a get request against our defined Qorus server\nconst result = await Qorus.QorusRequest.get({\n  path: '/api/latest/dataprovider/browse',\n});\n"
  },
  {
    "QorusRequest.post": "// First we initialize an Endpoint\nQorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Then we define the data object for the post request\nconst data = { user: 'sandbox', pass: 'sandbox' };\n\n// Next we initialize a post request against our defined Qorus server\nconst result = await Qorus.QorusRequest.post({\n  path: '/api/latest/public/login',\n  data: data,\n});\n"
  },
  {
    "QorusRequest.put": "// First we initialize an Endpoint and provider user and pass to authenticate the user along with it\nQorus.QorusAuthenticator.addEndpoint({\n  url: 'https://sandbox.qoretechnologies.com',\n  endpointId: 'rippy',\n  version: 'latest',\n});\nawait Qorus.QorusAuthenticator.login({\n  user: 'sandbox',\n  pass: 'sandbox',\n});\n\n// Next we initialize a put request against our defined Qorus server\nconst result = await Qorus.QorusRequest.put({\n  path: '/api/latest/dataprovider/browse',\n  data: { context: 'api' },\n});\n"
  }
]
